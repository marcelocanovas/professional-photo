{
  "version": 3,
  "sources": ["../../lib/pollRemixStatus.ts"],
  "sourcesContent": ["import axios from \"axios\";\nimport { RemixImage, RemixResponse } from \"@/types/remix.type\";\n\n// Properties required for polling remix status\ninterface PollRemixStatusProps {\n  modelId: string;\n  remixId: string;\n  updateStatus: (images: RemixImage[]) => void;\n  setIsPolling: (isPolling: boolean) => void;\n}\n\n// Define the polling interval in milliseconds\nconst POLL_INTERVAL_MS = 3000;\n\n// The checkStatus function polls the remix status, updates images and recursively calls itself\n// until the status is either \"finished\" or \"failed\"\nasync function checkStatus(\n  { modelId, remixId, updateStatus, setIsPolling }: PollRemixStatusProps,\n  pollInterval: number\n): Promise<void> {\n  try {\n    // Send an API request to the server\n    const response = await axios.get<RemixResponse>(\n      `/api/check-remix-status?modelId=${modelId}&remixId=${remixId}`\n    );\n\n    // Extract the remix status\n    const status = response.data.status;\n\n    // If the status is \"finished\" or \"failed\", update images and stop polling\n    if (status === \"finished\" || status === \"failed\") {\n      updateStatus(response.data.images);\n      setIsPolling(false);\n    }\n    // Keep polling if the status is \"queued\" or \"processing\"\n    else if (status === \"queued\" || status === \"processing\") {\n      setTimeout(\n        () =>\n          checkStatus(\n            { modelId, remixId, updateStatus, setIsPolling },\n            pollInterval\n          ),\n        pollInterval\n      );\n    }\n    // Throw an error if the received status is unexpected\n    else {\n      throw new Error(\"Unexpected status value\");\n    }\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      console.error(\"Error while polling for remix status:\", error.message);\n    }\n  }\n}\n\n// The pollRemixStatus function starts the polling process by setting the isPolling state to true\n// and calling the checkStatus function for the first time\nexport const pollRemixStatus = (\n  modelId: string,\n  remixId: string,\n  updateStatus: (images: RemixImage[]) => void,\n  setIsPolling: (isPolling: boolean) => void\n): Promise<void> => {\n  setIsPolling(true);\n\n  return checkStatus(\n    { modelId, remixId, updateStatus, setIsPolling },\n    POLL_INTERVAL_MS\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAYlB,MAAM,mBAAmB;AAIzB,eAAe,YACb,EAAE,SAAS,SAAS,cAAc,aAAa,GAC/C,cACe;AACf,MAAI;AAEF,UAAM,WAAW,MAAM,aAAAA,QAAM;AAAA,MAC3B,mCAAmC,mBAAmB;AAAA,IACxD;AAGA,UAAM,SAAS,SAAS,KAAK;AAG7B,QAAI,WAAW,cAAc,WAAW,UAAU;AAChD,mBAAa,SAAS,KAAK,MAAM;AACjC,mBAAa,KAAK;AAAA,IACpB,WAES,WAAW,YAAY,WAAW,cAAc;AACvD;AAAA,QACE,MACE;AAAA,UACE,EAAE,SAAS,SAAS,cAAc,aAAa;AAAA,UAC/C;AAAA,QACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,OAEK;AACH,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC3C;AAAA,EACF,SAAS,OAAP;AACA,QAAI,iBAAiB,OAAO;AAC1B,cAAQ,MAAM,yCAAyC,MAAM,OAAO;AAAA,IACtE;AAAA,EACF;AACF;AAIO,MAAM,kBAAkB,CAC7B,SACA,SACA,cACA,iBACkB;AAClB,eAAa,IAAI;AAEjB,SAAO;AAAA,IACL,EAAE,SAAS,SAAS,cAAc,aAAa;AAAA,IAC/C;AAAA,EACF;AACF;",
  "names": ["axios"]
}
